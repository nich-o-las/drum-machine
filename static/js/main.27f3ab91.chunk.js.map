{"version":3,"sources":["Components/DrumPad/DrumPad.js","Components/DrumMachine/DrumMachine.js","Components/Title/Title.js","App.js","serviceWorker.js","index.js"],"names":["DrumPad","props","playAudio","audio","Audio","sample","volume","play","handleKeyPress","e","keyCode","setActive","useEffect","document","addEventListener","id","keyPress","onClick","onKeyDown","className","name","DrumMachine","useState","bankOne","activeBank","setActiveBank","activePad","setActivePad","setVolume","map","o","idx","key","a","setTimeout","type","onChange","bankTwo","min","max","defaultValue","target","value","Title","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ulGAGe,SAASA,EAAQC,GAC9B,IAAMC,EAAY,WAChB,IAAMC,EAAQ,IAAIC,MAAMH,EAAMI,QAC9BF,EAAMG,OAASL,EAAMK,OACrBH,EAAMI,QAEFC,EAAiB,SAACC,GACnBA,EAAEC,UAAYT,EAAMS,UACrBR,IACAD,EAAMU,cAIV,OADAC,qBAAU,WAAKC,SAASC,iBAAiB,UAAWN,KAAkB,IAEpE,yBACEO,GAAId,EAAMe,SACVC,QAAS,WACPf,IACAD,EAAMU,aAERO,UAAW,kBAAIjB,EAAMiB,aACrBC,UAAU,WAEV,2BAAG,2BAAIlB,EAAMe,WACb,2BAAIf,EAAMmB,O,kBCrBD,SAASC,IAAc,IAAD,EACCC,mBAASC,GADV,mBAC5BC,EAD4B,KAChBC,EADgB,OAEDH,mBAAS,IAFR,mBAE5BI,EAF4B,KAEjBC,EAFiB,OAGPL,mBAAS,GAHF,mBAG5BhB,EAH4B,KAGpBsB,EAHoB,KAcnC,OACE,yBAAKT,UAAU,eACb,yBAAKA,UAAU,2CACVK,EAAWK,KAAI,SAACC,EAAGC,GAClB,OAAO,kBAAC,EAAD,eAASC,IAAKD,EAAKzB,OAAQA,EAAQK,UAAW,kBAdxCsB,EAc0DH,EAAEV,KAbjFO,EAAaM,QACbC,YAAW,kBAAIP,EAAa,MAAK,KAFb,IAACM,IAcuEH,QAG1F,yBAAKX,UAAU,4CACb,yBAAKA,UAAU,aACb,wCACA,2BAAOA,UAAU,UACf,2BAAOgB,KAAK,WAAWC,SAjBZ,WACOX,EAAzBD,IAAeD,EAAwBc,EAAyBd,MAiBzD,0BAAMJ,UAAU,YAElB,yCAEF,2BAAG,wCACH,uBAAGA,UAAU,aAAaO,GAC1B,2BAAOS,KAAK,QAAQG,IAAI,IAAIC,IAAI,MAAMC,aAAuB,IAATlC,EAAc8B,SArBnD,SAAC3B,GAClBmB,EAAUnB,EAAEgC,OAAOC,MAAQ,U,MCflB,SAASC,IACtB,OACE,wBAAIxB,UAAU,SAAd,aCSWyB,MATf,WACE,OACE,yBAAKzB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGc0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAStC,SAASuC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.27f3ab91.chunk.js","sourcesContent":["import React, {useEffect} from 'react';\r\nimport './DrumPad.css';\r\n\r\nexport default function DrumPad(props){  \r\n  const playAudio = () => {\r\n    const audio = new Audio(props.sample)\r\n    audio.volume = props.volume;\r\n    audio.play();\r\n  };\r\n  const handleKeyPress = (e)=>{\r\n    if(e.keyCode === props.keyCode){\r\n      playAudio();\r\n      props.setActive();\r\n    }\r\n  }\r\n  useEffect(()=>{document.addEventListener('keydown', handleKeyPress)}, []);\r\n  return(\r\n    <div \r\n      id={props.keyPress}\r\n      onClick={()=>{\r\n        playAudio();\r\n        props.setActive();\r\n      }} \r\n      onKeyDown={()=>props.onKeyDown()}\r\n      className=\"DrumPad\"\r\n    >\r\n      <p><b>{props.keyPress}</b></p>\r\n      <p>{props.name}</p>\r\n    </div>\r\n  )\r\n}\r\n","import React, {useState, useEffect} from 'react';\r\nimport './DrumMachine.css';\r\nimport DrumPad from '../DrumPad/DrumPad';\r\nimport bankOne from '../../utils/banks/bankOne.json';\r\nimport bankTwo from '../../utils/banks/bankTwo.json';\r\n\r\nexport default function DrumMachine(){\r\n  const [activeBank, setActiveBank] = useState(bankOne);\r\n  const [activePad, setActivePad] = useState('');\r\n  const [volume, setVolume] = useState(1);\r\n  const displayActive = (a) => {\r\n    setActivePad(a);\r\n    setTimeout(()=>setActivePad(''), 500);\r\n  }\r\n  const toggleActive = () => {\r\n    (activeBank === bankOne ? setActiveBank(bankTwo) : setActiveBank(bankOne));\r\n  }\r\n  const handleVolume = (e) => {\r\n      setVolume(e.target.value / 100)\r\n  }\r\n  return(\r\n    <div className=\"DrumMachine\">\r\n      <div className=\"DrumMachine-padBank DrumMachine-section\">\r\n          {activeBank.map((o, idx) => {\r\n            return <DrumPad key={idx} volume={volume} setActive={()=>displayActive(o.name)} {...o}/>\r\n          })}\r\n      </div>\r\n      <div className=\"DrumMachine-controls DrumMachine-section\">\r\n        <div className=\"switchBox\">\r\n          <span>Bank 1</span>\r\n          <label className=\"switch\">\r\n            <input type=\"checkbox\" onChange={toggleActive}/>\r\n            <span className=\"slider\"></span>\r\n          </label>\r\n          <span>Bank 2</span>\r\n        </div>\r\n        <p><b>Active: </b></p>\r\n        <p className=\"activePad\">{activePad}</p>\r\n        <input type=\"range\" min=\"1\" max=\"100\" defaultValue={volume * 100} onChange={handleVolume} />\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport './Title.css';\r\n\r\nexport default function Title(){\r\n  return(\r\n    <h1 className=\"Title\">DRUMATRON</h1>\r\n  )\r\n};","import React from 'react';\nimport './App.css';\nimport DrumMachine from './Components/DrumMachine/DrumMachine';\nimport Title from './Components/Title/Title';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Title />\n      <DrumMachine />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}